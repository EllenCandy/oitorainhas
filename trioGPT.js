// M√©todo "Vizinho Melhor": tenta mover uma rainha para a melhor posi√ß√£o na coluna
let iteracoesDupla = 0; // Contador de itera√ß√µes para o segundo m√©todo

function proximoEstadoDupla(estadoAtual) {
    iteracoesDupla++; // Incrementa o contador de itera√ß√µes a cada chamada

    // 1. Verificar se o estado atual j√° √© uma solu√ß√£o
    if (verificarSolucao(estadoAtual)) {
        console.log(`üéâ Solu√ß√£o encontrada para o Tabuleiro 2 em ${iteracoesDupla} itera√ß√µes!`);
        return estadoAtual; // Retorna o estado atual se for uma solu√ß√£o
    }

    // 2. Criar uma c√≥pia do estado
    let melhorEstadoVizinho = JSON.parse(JSON.stringify(estadoAtual));
    let menorConflitos = contarConflitos(estadoAtual);

    // 3. Para cada coluna, tente mover a rainha para a melhor posi√ß√£o poss√≠vel
    for (let coluna = 0; coluna < 8; coluna++) {
        let linhaRainhaAtual = -1;
        // Encontrar a rainha nesta coluna
        for (let r = 0; r < 8; r++) {
            if (estadoAtual[r][coluna] === 'Q') {
                linhaRainhaAtual = r;
                break;
            }
        }

        if (linhaRainhaAtual === -1) continue; // N√£o h√° rainha nesta coluna (n√£o deve acontecer com 8 rainhas)

        // Tentar cada linha nesta coluna
        for (let novaLinha = 0; novaLinha < 8; novaLinha++) {
            // Criar um estado tempor√°rio para testar o movimento
            const estadoTeste = JSON.parse(JSON.stringify(estadoAtual));
            estadoTeste[linhaRainhaAtual][coluna] = ''; // Remove a rainha da posi√ß√£o original
            estadoTeste[novaLinha][coluna] = 'Q'; // Coloca na nova posi√ß√£o

            const conflitosVizinho = contarConflitos(estadoTeste);

            // Se encontrarmos um estado vizinho melhor (ou igual, para explorar)
            if (conflitosVizinho < menorConflitos) {
                menorConflitos = conflitosVizinho;
                melhorEstadoVizinho = estadoTeste;
            }
        }
    }

    // 4. Se encontrou um movimento que reduz conflitos, faz o movimento.
    if (menorConflitos < contarConflitos(estadoAtual)) {
        return melhorEstadoVizinho;
    } else {
        // Se n√£o houver movimento que melhore, faz um movimento aleat√≥rio para tentar sair de um "plat√≥"
        // (Isso evita que o algoritmo fique preso em um estado sem melhorias)
        console.log("Tabuleiro 2 preso em plat√¥, fazendo movimento aleat√≥rio para tentar sair.");
        return moverRainhaAleatoria(estadoAtual);
    }
}

// --- Fun√ß√£o Auxiliar Espec√≠fica para proximoEstadoDupla (coloque junto com ela) ---

// Fun√ß√£o para mover uma rainha aleat√≥ria para uma posi√ß√£o aleat√≥ria (para sair de plat√¥s)
function moverRainhaAleatoria(estado) {
    const novoEstado = JSON.parse(JSON.stringify(estado));

    const rainhasPosicoes = [];
    for (let r = 0; r < 8; r++) {
        for (let c = 0; c < 8; c++) {
            if (novoEstado[r][c] === 'Q') {
                rainhasPosicoes.push([r, c]);
            }
        }
    }

    const [linhaRainha, colunaRainha] = rainhasPosicoes[Math.floor(Math.random() * rainhasPosicoes.length)];

    novoEstado[linhaRainha][colunaRainha] = ''; // Remove a rainha

    let novaLinha, novaColuna;
    do {
        novaLinha = Math.floor(Math.random() * 8);
        novaColuna = Math.floor(Math.random() * 8);
    } while (novoEstado[novaLinha][novaColuna] === 'Q'); // Garante que n√£o caia em outra rainha

    novoEstado[novaLinha][novaColuna] = 'Q'; // Coloca na nova posi√ß√£o

    return novoEstado;
}