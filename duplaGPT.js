// M√©todo simples: tenta mover uma rainha por vez para uma posi√ß√£o melhor na mesma coluna
let iteracoesTrio = 0; // Contador de itera√ß√µes para o primeiro m√©todo

function proximoEstadoTrio(estadoAtual) {
    iteracoesTrio++; // Incrementa o contador de itera√ß√µes a cada chamada

    // 1. Verificar se o estado atual j√° √© uma solu√ß√£o
    if (verificarSolucao(estadoAtual)) {
        console.log(`üéâ Solu√ß√£o encontrada para o Tabuleiro 1 em ${iteracoesTrio} itera√ß√µes!`);
        return estadoAtual; // Retorna o estado atual se for uma solu√ß√£o
    }

    // 2. Criar uma c√≥pia do estado para n√£o modificar o original
    const novoEstado = JSON.parse(JSON.stringify(estadoAtual));

    // 3. Encontrar uma rainha aleat√≥ria para mover
    const rainhasPosicoes = [];
    for (let r = 0; r < 8; r++) {
        for (let c = 0; c < 8; c++) {
            if (novoEstado[r][c] === 'Q') {
                rainhasPosicoes.push([r, c]);
            }
        }
    }

    // Se por algum motivo n√£o houver 8 rainhas (estado corrompido), reinicia ou trata erro
    if (rainhasPosicoes.length !== 8) {
        // Isso n√£o deve acontecer com o seu criarEstadoInicial, mas √© uma prote√ß√£o
        console.warn("Estado inv√°lido no Tabuleiro 1: n√∫mero de rainhas incorreto. Reiniciando busca.");
        return criarEstadoInicial(); // Reinicia com um novo estado inicial
    }

    const [linhaRainha, colunaRainha] = rainhasPosicoes[Math.floor(Math.random() * rainhasPosicoes.length)];

    // 4. Mover a rainha para uma nova posi√ß√£o aleat√≥ria **dentro da mesma coluna**
    // Remove a rainha da posi√ß√£o atual
    novoEstado[linhaRainha][colunaRainha] = '';

    let novaLinhaRainha;
    do {
        novaLinhaRainha = Math.floor(Math.random() * 8);
    } while (novaLinhaRainha === linhaRainha); // Garante que a nova linha seja diferente da original

    // Coloca a rainha na nova posi√ß√£o na mesma coluna
    novoEstado[novaLinhaRainha][colunaRainha] = 'Q';

    // Opcional: Para evitar loops infinitos em estados "presos", podemos ter um limite de itera√ß√µes
    // ou um mecanismo de "recome√ßar". Por simplicidade, vamos deixar ele tentar continuamente por enquanto,
    // mas voc√™ pode adicionar:
    // if (iteracoesTrio > 10000) { console.log("Limite de itera√ß√µes atingido, reiniciando..."); return criarEstadoInicial(); }

    return novoEstado; // Retorna o estado modificado
}

// --- Fun√ß√µes Auxiliares (Coloque estas no seu c√≥digo principal, fora das fun√ß√µes de m√©todo) ---

// Fun√ß√£o para contar conflitos (quantas rainhas se atacam)
function contarConflitos(estado) {
    let conflitos = 0;
    const rainhas = [];

    // Encontrar todas as posi√ß√µes das rainhas
    for (let r = 0; r < 8; r++) {
        for (let c = 0; c < 8; c++) {
            if (estado[r][c] === 'Q') {
                rainhas.push([r, c]);
            }
        }
    }

    // Para cada rainha, verificar conflitos com as rainhas seguintes
    for (let i = 0; i < rainhas.length; i++) {
        for (let j = i + 1; j < rainhas.length; j++) {
            const [r1, c1] = rainhas[i];
            const [r2, c2] = rainhas[j];

            // Conflito na mesma linha
            if (r1 === r2) {
                conflitos++;
            }
            // Conflito na mesma coluna
            if (c1 === c2) {
                conflitos++;
            }
            // Conflito na mesma diagonal (abs(r1-r2) == abs(c1-c2))
            if (Math.abs(r1 - r2) === Math.abs(c1 - c2)) {
                conflitos++;
            }
        }
    }
    return conflitos;
}

// Fun√ß√£o para verificar se um estado √© uma solu√ß√£o (0 conflitos)
function verificarSolucao(estado) {
    return contarConflitos(estado) === 0;
}